#summary Generating a simple sentence

= Generating a simple sentence =
In the sample Java class {{{TestMain}}} shown above, we have the statements:

{{{
import simplenlg.framework.*;
import simplenlg.lexicon.*;
import simplenlg.realiser.english.*;
import simplenlg.phrasespec.*;
import simplenlg.features.*;
}}}

These classes allow you to specify the parts of speech of a sentence and to perform various operations on them. The notion of ‘sentence’ and ‘phrase’ is captured in the simplenlg class called {{{SPhraseSpec}}}; the notion of ‘noun phrase’ is represented by the class {{{NPPhraseSpec}}}; etc. 

It’s important to note that simplenlg provides only a very simple grammar: its notions of a sentence, noun phrase, etc., are very basic and are by no means representative of the incredibly varied and complicated grammar of the English language{{{[1]}}}. 

Let’s see how we would define and combine various parts of speech to generate a simple sentence such as "My dog chases George". We’ll make use of the simplenlg construct {{{SPhraseSpec}}}, which allows us to define a sentence or a clause in terms of its syntactic constituents. This is useful because it allows us to hand different parts of a clause to simplenlg, in no particular order, and simplenlg will assemble those parts into the appropriate grammatical structure. Dividing a sentence into smaller parts and labeling those parts provides more flexibility because we can then reassemble components in various ways. 

{{{
SPhraseSpec p = nlgFactory.createClause();
p.setSubject("my dog");
p.setVerb("chase");
p.setObject("George");
}}}

The above set of calls to simplenlg defines the constituents or components of the sentence we wish to construct: we have specified a subject, a verb and an object for our sentence. Now, all that remains is to create a ‘realiser’ which will take these different components of the sentence, combine them and realise the text to make the result syntactically and morphologically correct:

{{{
String output = realiser.realiseSentence(p);
System.out.println(output);
}}}

The resulting output is:
{{{My dog chases George.}}}

When parts of speech are defined and assembled into an instance of the {{{SPhraseSpec}}} class, methods associated with that class such as {{{setSubject}}}, {{{setVerb}}} and {{{setObject}}}, assemble the parts of speech by obeying the simple grammar embodied in simplenlg{{{[2]}}}. 

{{{[1]}}} See AppendixB for a full description of the simplenlg grammar.

{{{[2]}}} And, as we will see later, rules of grammar will have also been enforced in building up the smaller constituents of the sentence (such as NPPhraseSpec and PPPhraseSpec) to ensure they are well-formed. Thus, the rules of grammar which simplenlg implements are not defined within a single module of the simplenlg code but instead are spread throughout the various class definitions.